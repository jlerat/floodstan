real sign(real x) {
    return x > 0 ? 1 : (x < 0 ? -1 : 0);
}

real logpearson3_lpdf(vector y, real m, real s, real g) {
    int N = rows(y);

    // transition from Pearson3 to Normal
    real n2p_trans = 1e-5;

    real abs_g = abs(g);
    real sign_g = sign(g);
   
    if(abs_g < n2p_trans) {
        return lognormal_lpdf(y | m, s);

    } else {
        // Original LogPearson3 parameterisation
        real alpha = 4 / g / g;
        real beta = 2 / g / s;
        real abs_beta = abs(beta);
        real tau = m - 2 * s / g;

        vector[N] ly = log(y);
        vector[N] u = sign_g * (ly - tau);
        real umin = min(u);
        if(umin < 0) {
            reject("umin (", umin, ") < 0 with m=", m, " s=", s, " g=", g);
        }

        return gamma_lpdf(u | alpha, abs_beta) - sum(ly);
    }
}

real logpearson3_cdf(real y, real m, real s, real g){
    real cdf;
    
    // transition from Pearson3 to Normal
    real n2p_trans = 1e-5;

    // Original LogPearson3 parameterisation
    real alpha = 4. / g / g;
    real beta = 2. / g / s;
    real abs_beta = abs(beta);
    real tau = m - 2 * s / g;
    
    real abs_g = abs(g);
    real sign_g = sign(g);

    // Compute log cdf depending on skew
    real x = sign_g * (log(y) - tau);
    
    if(x < 0 && abs_g > n2p_trans) 
        reject("x (", x, ") < 0 with m=", m, " s=", s, " g=", g);

    if(abs_g < n2p_trans) {
        return lognormal_cdf(y | m, s);
    }
    else {
        cdf = gamma_cdf(x | alpha, abs_beta);
    } 

    // In this case, cdf = 1-cdf, or 
    if(beta < 0)
        cdf = 1-cdf;
    
    return cdf;
}

real logpearson3_lcdf(real y, real m, real s, real g) {
    return log(logpearson3_cdf(y | m, s, g));
}



