# Pipeline to create ananconda environment and run my tests

resources:
    repositories:

    - repository: hydrodiy
      type: git
      name: hydrodiy/hydrodiy
      ref: refs/heads/master
      trigger:
        branches:
            include:
            - master
        paths:
            exclude:
            - azure-pipelines.yml
            - env_floodstani.yml

    - repository: hyzarr
      type: git
      name: hyzarr/hyzarr
      ref: refs/heads/master
      trigger:
        branches:
            include:
            - master
        paths:
            exclude:
            - azure-pipelines.yml
            - env_floodstani.yml

    - repository: nrivdata
      type: git
      name: northern_rivers/nrivdata
      ref: refs/heads/master
      trigger:
        branches:
            include:
            - master
        paths:
            exclude:
            - azure-pipelines.yml
            - env_floodstani.yml

    - repository: nrivfloodfreq
      type: git
      name: northern_rivers/nrivfloodfreq
      ref: refs/heads/master
      trigger:
        branches:
            include:
            - master
        paths:
            exclude:
            - azure-pipelines.yml
            - env_floodstani.yml


trigger:
- master

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python310:
      python.version: '3.10'

variables:
  CONDA_ENV_NAME: env_floodstani
  CONDA_HOME: /usr/share/miniconda/envs/$(CONDA_ENV_NAME)/
  BUILD_DIR: $(System.DefaultWorkingDirectory)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- checkout: self
- checkout: hydrodiy
- checkout: hyzarr
- checkout: nrivdata
- checkout: nrivfloodfreq

- bash: echo "##vso[task.prependpath]$CONDA/bin"
  displayName: Add conda to PATH

- task: Cache@2
  displayName: Use cached Anaconda environment
  inputs:
    key: conda | $(BUILD_DIR)/floodstan/env_floodstani.yml
    path: $(CONDA_HOME)
    cacheHitVar: CONDA_CACHE_RESTORED

- bash: conda env create --file $(BUILD_DIR)/floodstan/env_floodstani.yml
  displayName: Create Anaconda environment (if not restored from cache)
  condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

- script: |
    source activate $(CONDA_ENV_NAME)
    cd $(BUILD_DIR)/hydrodiy
    #python setup.py develop
    pip install -e .
  displayName: hydrodiy_install

- script: |
    source activate $(CONDA_ENV_NAME)
    cd $(BUILD_DIR)/hyzarr
    #python setup.py develop
    pip install -e .
  displayName: hyzarr_install

- script: |
    source activate $(CONDA_ENV_NAME)
    cd $(BUILD_DIR)/nrivdata
    #python setup.py develop
    pip install -e .
  displayName: nrivdata_install

- script: |
    source activate $(CONDA_ENV_NAME)
    cd $(BUILD_DIR)/nrivfloodfreq
    #python setup.py develop
    pip install -e .
  displayName: nrivfloodfreq_install

- script: |
    source activate $(CONDA_ENV_NAME)
    cd $(BUILD_DIR)/floodstan
    #python setup.py develop
    pip install -e .
  displayName: package_install


- script: |
    source activate $(CONDA_ENV_NAME)
    cd $(BUILD_DIR)/floodstan
    pytest --junitxml=junit/test-results.xml --cov=floodstan --cov-config=.coveragerc --cov-report=xml 
  displayName: test

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(BUILD_DIR)/floodstan/tests'
    contents: '*.log'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: copy_test_log

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(BUILD_DIR)/floodstan/tests/images'
    contents: '*.png'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: copy_test_images

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: stan_outputs

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Cobertura Coverage Report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

