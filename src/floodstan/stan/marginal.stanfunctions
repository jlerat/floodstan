 real sign(real x) {
    return x > 0 ? 1 : (x < 0 ? -1 : 0);
 }

// -------------- GEV distribution ------------------------------
// tau Bounds when kappa > 0 : [ymax-alpha/kapp, +infty[
// tau Bounds when kappa < 0 : ]-infty, ycensor-alpha/kapp]

real gev_lpdf(vector y, real tau, real alpha, real kappa){
    int N = rows(y);
    real logalpha = log(alpha);
    vector[N] u = (y-tau)/alpha;
    vector[N] v;

    // Threshold to transition from GEV to Gumbel
    real GEV2Gumbel_transition = 1e-10;

    real y0 = tau+alpha/kappa;
    if(kappa < 0) {
        real ymin = min(y);
        if(ymin < y0)
            reject("min(y) (", ymin, ") is lower than y0 (", y0, ").");
    }
    else {
        real ymax = max(y);
        if(ymax > y0)
            reject("max(y) (", ymax, ") is greater than y0 (", y0, ").");
    }
    
    if(abs(kappa) > GEV2Gumbel_transition) {
        // This is GEV log pdf
        v = -pow(1 - kappa * u, 1 / kappa);
        return -N * logalpha + sum(v + (1 / kappa - 1) * log(1 - kappa * u));

    } else {
        // This Gumbel log pdf
        return -N * logalpha - sum(u + exp(-u));
    }
}

real gev_lcdf(real y, real tau, real alpha, real kappa){
    real u = (y - tau) / alpha;
    real v;
   
    // Threshold to transition from GEV to Gumbel
    real GEV2Gumbel_transition = 1e-10;

    if(abs(kappa) > GEV2Gumbel_transition) {
        // No parameter constraint here, already taken care of in lpdf
        return -pow(1. - kappa * u, 1. / kappa);

    } else {
        return -exp(-u);
    }
}

// -------------- Pearson3 and LogPearson3 distributions -------------
// equivalent to a shifted Gamma distribution in log space

real logpearson3_lpdf(vector y, real m, real s, real g) {
    int N = rows(y);

    // transition from Pearson3 to Normal
    real n2p_trans = 1e-5;

    real abs_g = abs(g);
    real sign_g = sign(g);
   
    if(abs_g < n2p_trans) {
        return lognormal_lpdf(y | m, s);

    } else {
        // Original LogPearson3 parameterisation
        real alpha = 4 / g / g;
        real beta = 2 / g / s;
        real abs_beta = abs(beta);
        real tau = m - 2 * s / g;

        vector[N] ly = log(y);
        vector[N] u = sign_g * (ly - tau);
        real umin = min(u);
        if(umin < 0) {
            reject("umin (", umin, ") < 0 with m=", m, " s=", s, " g=", g);
        }

        return gamma_lpdf(u | alpha, abs_beta) - sum(ly);
    }
}

real logpearson3_cdf(real y, real m, real s, real g){
    real cdf;
    
    // transition from Pearson3 to Normal
    real n2p_trans = 1e-5;

    // Original LogPearson3 parameterisation
    real alpha = 4. / g / g;
    real beta = 2. / g / s;
    real abs_beta = abs(beta);
    real tau = m - 2 * s / g;
    
    real abs_g = abs(g);
    real sign_g = sign(g);

    // Compute log cdf depending on skew
    real x = sign_g * (log(y) - tau);
    
    if(x < 0 && abs_g > n2p_trans) 
        reject("x (", x, ") < 0 with m=", m, " s=", s, " g=", g);

    if(abs_g < n2p_trans) {
        return lognormal_cdf(y | m, s);
    }
    else {
        cdf = gamma_cdf(x | alpha, abs_beta);
    } 

    // In this case, cdf = 1-cdf, or 
    if(beta < 0)
        cdf = 1-cdf;
    
    return cdf;
}


// -------------- Generalized Pareto -------------
real genpareto_lpdf(vector y, real tau, real alpha, real kappa) {
    int N = rows(y);
    real kappa_transition = 1e-6; 

    vector[N] z = (y - tau) / alpha;
    if(abs(kappa) > kappa_transition){
        // Check y are all in support
        real ymin = min(y);
        real ymax = max(y);

        //if(kappa > 0 && ((ymin < tau) || (ymax > tau + alpha / kappa)))
        //    reject("ymin (", ymin, ") < tau or ymax (", ymax, ") > tau+alpha/kappa",
        //           " with tau=", tau, " alpha=", alpha, " kappa=", kappa);

        //else if(kappa < 0 && (ymax > tau))
        //    reject("ymax (", ymax, ") > tau with tau=", tau, 
        //           " alpha=", alpha, " kappa=", kappa);

        z = -1. / kappa * log1m(kappa * z);
    }

    return -(1. - kappa) * sum(z) - N * log(alpha);
}

real genpareto_cdf(real y, real tau, real alpha, real kappa) {
    real kappa_transition = 1e-6; 

    real z = (y - tau) / alpha;
    if(abs(kappa) > kappa_transition){

        //if(kappa > 0 && ((y < tau) || (y > tau + alpha / kappa)))
        //    reject("y (", y, ") < tau or y (", y, ") > tau+alpha/kappa",
        //           " with tau=", tau, 
        //           " alpha=", alpha, " kappa=", kappa);

        //else if(kappa < 0 && (y < tau))
        //    reject("y (", y, ") < tau with tau=", tau, 
        //           " alpha=", alpha, " kappa=", kappa);
 
        z = -1. / kappa * log1m(kappa * z);
    }
    return 1. - exp(-z);    
}

real genpareto_lcdf(real y, real tau, real alpha, real kappa) {
    real kappa_transition = 1e-6; 

    real z = (y - tau) / alpha;
    if(abs(kappa) > kappa_transition){

        //if(kappa > 0 && ((y < tau) || (y > tau + alpha / kappa)))
        //    reject("y (", y, ") < tau or y (", y, ") > tau+alpha/kappa",
        //           " with tau=", tau, 
        //           " alpha=", alpha, " kappa=", kappa);

        //else if(kappa < 0 && (y < tau))
        //    reject("y (", y, ") < tau with tau=", tau, 
        //           " alpha=", alpha, " kappa=", kappa);
 
        z = -1. / kappa * log1m(kappa * z);
    }
    return log1m_exp(-z);
}

// -------------- Generalized Logistic -------------
real genlogistic_lpdf(vector y, real tau, real alpha, real kappa) {
    int N = rows(y);
    real kappa_transition = 1e-6; 

    vector[N] z = (y - tau) / alpha;
    if(abs(kappa) > kappa_transition){
        real y0 = kappa < 0 ? min(y) : max(y);
        real yt = tau + alpha / kappa;
        if(kappa * (y0 - yt) > 0)
            reject("y0 (", y0, ") incompatible with yt (", yt, ") with tau=", tau, 
                   " alpha=", alpha, " kappa=", kappa);
 
        z = -1. / kappa * log1m(kappa * z);
    }
    return -(1. - kappa) * sum(z) - 2. * sum(log(1 + exp(-z))) - N * log(alpha);
}

real genlogistic_cdf(real y, real tau, real alpha, real kappa) {
    real kappa_transition = 1e-6; 

    real z = (y - tau) / alpha;
    if(abs(kappa) > kappa_transition){
        real yt = tau + alpha / kappa;
        if(kappa * (y - yt) > 0)
            reject("y (", y, ") incompatible with yt (", yt, ") with tau=", tau, 
                   " alpha=", alpha, " kappa=", kappa);

        z = -1. / kappa * log1m(kappa * z);
    }
    return 1. / (1. + exp(-z));    
}

real genlogistic_lcdf(real y, real tau, real alpha, real kappa) {
    real kappa_transition = 1e-6; 

    real z = (y - tau) / alpha;
    if(abs(kappa) > kappa_transition){
        real yt = tau + alpha / kappa;
        if(kappa * (y - yt) > 0)
            reject("y (", y, ") incompatible with yt (", yt, ") with tau=", tau, 
                   " alpha=", alpha, " kappa=", kappa);

        z = -1. / kappa * log1m(kappa * z);
    }
    return -log1p_exp(-z);
}


// ------- Marginal functions -----------------------------
// 1=Gumbel, 2=LogNormal, 3=GEV, 4=LogPearson3, 5=Normal, 6=Generalized pareto
// 7=Generalized logistic, 8=Gamma

real marginal_lpdf(vector x, int marginal, real locn, real scale, real shape1)
{
    if(marginal==1){
        return gumbel_lpdf(x | locn, scale);
    }
    else if(marginal==2){
        return lognormal_lpdf(x | locn, scale);
    }
    else if(marginal==3){
        return gev_lpdf(x | locn, scale, shape1);
    }
    else if(marginal==4){
        return logpearson3_lpdf(x | locn, scale, shape1);
    }
    else if(marginal==5){
        return normal_lpdf(x | locn, scale);
    }
    else if(marginal==6){
        return genpareto_lpdf(x | locn, scale, shape1);
    }
    else if(marginal==7){
        return genlogistic_lpdf(x | locn, scale, shape1);
    }
    else if(marginal==8){
        // Assumes that location and scale parameters are the mean 
        // and variance of Gamma distribution 
        // assume loc = mean and beta = 1/scale
        // hence alpha=mean/scale
        // See https://en.wikipedia.org/wiki/Gamma_distribution
        return gamma_lpdf(x | locn / scale, 1./scale);
    }

    return not_a_number();
}

real marginal_cdf(real x, int marginal, real locn, real scale, real shape1)
{
    if(marginal==1){
        return gumbel_cdf(x | locn, scale);
    }
    else if(marginal==2){
        return lognormal_cdf(x | locn, scale);
    }
    else if(marginal==3){
        return exp(gev_lcdf(x | locn, scale, shape1));
    }
    else if(marginal==4){
        return logpearson3_cdf(x | locn, scale, shape1);
    }
    else if(marginal==5){
        return normal_cdf(x | locn, scale);
    }
    else if(marginal==6){
        return genpareto_cdf(x | locn, scale, shape1);
    }
    else if(marginal==7){
        return genlogistic_cdf(x | locn, scale, shape1);
    }
    else if(marginal==8){
        return gamma_cdf(x | locn/scale, 1.0/scale);
    }
    return not_a_number();
}

real marginal_lcdf(real x, int marginal, real locn, real scale, real shape1)
{
    if(marginal==1){
        return gumbel_lcdf(x | locn, scale);
    }
    else if(marginal==2){
        return lognormal_lcdf(x | locn, scale);
    }
    else if(marginal==3){
        return gev_lcdf(x | locn, scale, shape1);
    }
    else if(marginal==4){
        return log(logpearson3_cdf(x | locn, scale, shape1));
    }
    else if(marginal==5){
        return normal_lcdf(x | locn, scale);
    }
    else if(marginal==6){
        return genpareto_lcdf(x | locn, scale, shape1);
    }
    else if(marginal==7){
        return genlogistic_lcdf(x | locn, scale, shape1);
    }
    else if(marginal==8){
        return gamma_lcdf(x | locn/scale, 1.0/scale);
    }
    return not_a_number();
}




